(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))a(n);new MutationObserver(n=>{for(const s of n)if(s.type==="childList")for(const r of s.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&a(r)}).observe(document,{childList:!0,subtree:!0});function e(n){const s={};return n.integrity&&(s.integrity=n.integrity),n.referrerPolicy&&(s.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?s.credentials="include":n.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function a(n){if(n.ep)return;n.ep=!0;const s=e(n);fetch(n.href,s)}})();class m{x;y;char;hp;team;godName;rangedStrength;rangedSpeed;rangedCooldown=0;constructor(t,e,a,n,s,r,c,i){this.x=t,this.y=e,this.char=a,this.hp=n,this.team=s,this.rangedStrength=r,this.rangedSpeed=c,this.godName=i}takeDamage(t){this.hp-=t}}const x=[{godName:"Mesin",name:"Lightning",char:"L",hp:1,rangedStrength:1,rangedSpeed:3},{godName:"Beroan",name:"Wyrm",char:"W",hp:5,rangedStrength:1,rangedSpeed:6},{godName:"Tecton",name:"Golem",char:"G",hp:8,rangedStrength:2,rangedSpeed:8},{godName:"Gul",name:"Specter",char:"S",hp:3,rangedStrength:2,rangedSpeed:4}],I=[{name:"Mesin",theme:"God of Storms and Order",avatar:{godName:"Mesin",name:"Aspect of Mesin",char:"Φ",hp:3,rangedStrength:1,rangedSpeed:5},affinities:{positive:"Tecton",negative:"Gul"}},{name:"Beroan",theme:"God of Wilds and Strength",avatar:{godName:"Beroan",name:"Aspect of Beroan",char:"Ψ",hp:6,rangedStrength:1,rangedSpeed:7},affinities:{positive:"Gul",negative:"Tecton"}},{name:"Tecton",theme:"God of Stone and Fortitude",avatar:{godName:"Tecton",name:"Aspect of Tecton",char:"Θ",hp:8,rangedStrength:2,rangedSpeed:9},affinities:{positive:"Mesin",negative:"Beroan"}},{name:"Gul",theme:"God of Whispers and Decay",avatar:{godName:"Gul",name:"Aspect of Gul",char:"Σ",hp:2,rangedStrength:2,rangedSpeed:4},affinities:{positive:"Beroan",negative:"Mesin"}}],l=42,f=24,u=12,d=10,h=18;class P{app;constructor(t){this.app=t}render(t){let e=this.createBaseGrid(),a="";const n=t.gameState;switch(n){case"GOD_SELECTION":const r=this.renderGodSelection(e);e=r.grid,a=r.html;break;case"PRAYER":const c=this.renderPrayer(e,t);e=c.grid,a=c.html;break;case"CASTING":const i=this.renderCasting(e,t);e=i.grid,a=i.html;break;case"TRIAL":e=this.renderTrial(e,t);break;case"JUDGEMENT":const o=this.renderJudgement(e,t);e=o.grid,a=o.html;break}n!=="TRIAL"&&Math.random()<.05&&this.applyGlitchEffect(e);const s=e.map(r=>r.join("")).join(`
`);this.app.innerHTML=`<div class="game-container">
        <div class="game-background">${s}</div>
        ${a}
    </div>`}createBaseGrid(){const t=Array.from({length:f},()=>Array(l).fill(" "));for(let e=0;e<f;e++)for(let a=0;a<l;a++)(e===0||e===f-1||a===0||a===l-1)&&(t[e][a]="▒"),(e===1||e===f-2)&&a>0&&a<l-1&&(t[e][a]=" "),(a===1||a===l-2)&&e>0&&e<f-1&&(t[e][a]=" ");return t}drawAsciiHeader(t,e){const a=`╔═${"═".repeat(e.length)}═╗`,n=`║ ${e} ║`,s=`╚═${"═".repeat(e.length)}═╝`,r=Math.floor((l-n.length)/2);t[3].splice(r,a.length,...a.split("")),t[4].splice(r,n.length,...n.split("")),t[5].splice(r,s.length,...s.split(""))}applyGlitchEffect(t){const e=["#","%","$","?","!","0","1","▓","▒","░"],a=Math.floor(Math.random()*15)+5;for(let n=0;n<a;n++){const s=Math.floor(Math.random()*l),r=Math.floor(Math.random()*f);t[r]&&t[r][s]===" "&&(t[r][s]=e[Math.floor(Math.random()*e.length)])}}renderGodSelection(t){this.drawAsciiHeader(t,"CHOOSE YOUR DEITY");let e="";const a=[{y:8},{y:12},{y:16},{y:20}];return I.forEach((n,s)=>{const r=a[s],c=`[ ${n.name.padEnd(8," ")} - ${n.theme} ]`,i=Math.floor((l-c.length)/2);t[r.y].splice(i,c.length,...c.split("")),e+=`<div class="clickable" style="top: ${r.y*h}px; left: ${i*d}px; width: ${c.length*d}px; height: ${h}px;" data-action="select-god" data-name="${n.name}"></div>`}),{grid:t,html:e}}renderPrayer(t,e){this.drawAsciiHeader(t,"PRAYER PHASE");let a="";const n=[{x:5,y:9},{x:18,y:9},{x:31,y:9},{x:5,y:15},{x:18,y:15},{x:31,y:15},{x:18,y:21}];e.cardsInPrayer.forEach((o,g)=>{const p=n[g],A=e.selectedPrayerIndices.includes(g);t[p.y-1].splice(p.x,6,..."┌────┐".split("")),t[p.y].splice(p.x,6,...`│  ${o.char} │`.split("")),t[p.y+1].splice(p.x,6,..."└────┘".split("")),a+=`<div class="clickable card-button ${A?"selected":""}" style="top: ${(p.y-1)*h}px; left: ${p.x*d}px;" data-action="select-card" data-index="${g}"></div>`});const r=`[ Pray (${e.getPrayerCost()} Aether) ]`,c=`Aether: ${e.playerAether}`;t[f-6].splice(3,c.length,...c.split(""));const i=Math.floor((l-r.length)/2);return t[f-4].splice(i,r.length,...r.split("")),a+=`<div class="clickable pray-button" style="top: ${(f-4)*h}px; left: ${i*d}px;" data-action="confirm-prayer"></div>`,{grid:t,html:a}}renderCasting(t,e){this.drawAsciiHeader(t,"CASTING PHASE");let a="";const n=`Aether: ${e.playerAether}`;if(t[18].splice(3,n.length,...n.split("")),[{x:5,y:8},{x:18,y:8},{x:31,y:8},{x:5,y:13},{x:18,y:13},{x:31,y:13}].forEach((i,o)=>{const g=e.castingArray[o];g?(t[i.y-1].splice(i.x,6,..."┌────┐".split("")),t[i.y].splice(i.x,6,...`│  ${g.char} │`.split("")),t[i.y+1].splice(i.x,6,..."└────┘".split(""))):(t[i.y].splice(i.x,6,..."[    ]".split("")),a+=`<div class="clickable" style="top: ${(i.y-1)*h}px; left: ${i.x*d}px; width: ${6*d}px; height: ${3*h}px;" data-action="select-board-slot" data-index="${o}"></div>`)}),e.playerHand.forEach((i,o)=>{const g=e.selectedHandIndex===o,p=3+o*7;t[20].splice(p,6,...`[${i.char}]${g?"<":" "}`.split("")),a+=`<div class="clickable" style="top: ${20*h}px; left: ${p*d}px; width: ${3*d}px; height: ${1*h}px;" data-action="select-hand-card" data-index="${o}"></div>`}),e.selectedHandIndex!==null){const i="[ Sacrifice for 1 Aether ]",o=Math.floor((l-i.length)/2);t[18].splice(o,i.length,...i.split("")),a+=`<div class="clickable" style="top: ${18*h}px; left: ${o*d}px; width: ${i.length*d}px; height: ${1*h}px;" data-action="sacrifice-card"></div>`}const r="[ Begin Trial ]",c=Math.floor((l-r.length)/2);return t[22].splice(c,r.length,...r.split("")),a+=`<div class="clickable" style="top: ${22*h}px; left: ${c*d}px; width: ${r.length*d}px; height: ${1*h}px;" data-action="start-trial"></div>`,{grid:t,html:a}}renderJudgement(t,e){const n=e.units.filter(i=>i.team==="player").length>0?"VICTORY":"DEFEAT";this.drawAsciiHeader(t,n);const s="[ Click to Continue ]",r=Math.floor((l-s.length)/2);t[15].splice(r,s.length,...s.split(""));const c=`<div class="clickable" style="top: ${15*h}px; left: ${r*d}px; width: ${s.length*d}px; height: ${1*h}px;" data-action="continue"></div>`;return{grid:t,html:c}}renderTrial(t,e){t[u]=Array(l).fill("─"),t[u][1]="▒",t[u][l-2]="▒";for(const a of e.units)t[a.y]&&t[a.y][a.x]&&(t[a.y][a.x]=a.char);return t}}const S=12;class T{updateTrial(t){for(const e of t){if(e.rangedCooldown>0&&e.rangedCooldown--,!(e.team==="player"?e.y<=S+1:e.y>=S-1)){e.y+=e.team==="player"?-1:1;continue}if(e.rangedCooldown===0){const n=this.findTarget(e,t);n&&(n.takeDamage(e.rangedStrength),e.rangedCooldown=e.rangedSpeed)}}return t.filter(e=>e.hp>0)}findTarget(t,e){let a=null,n=1/0;for(const s of e)if(t.team!==s.team){const r=Math.abs(t.y-s.y);r<n&&(n=r,a=s)}return a}}class E{gameState="GOD_SELECTION";chosenGod=null;playerAether=10;units=[];playerHand=[];cardsInPrayer=[];selectedPrayerIndices=[];castingArray=Array(6).fill(null);selectedHandIndex=null;renderer;combat;constructor(t){this.renderer=new P(t),this.combat=new T,t.addEventListener("click",e=>this.handleClicks(e))}start(){setInterval(()=>this.tick(),100),this.render()}tick(){this.gameState==="TRIAL"&&(this.units=this.combat.updateTrial(this.units),this.render(),(!this.units.some(t=>t.team==="player")||!this.units.some(t=>t.team==="enemy"))&&(this.gameState="JUDGEMENT",this.render()))}render(){const t={gameState:this.gameState,chosenGod:this.chosenGod,playerAether:this.playerAether,units:this.units,playerHand:this.playerHand,cardsInPrayer:this.cardsInPrayer,selectedPrayerIndices:this.selectedPrayerIndices,castingArray:this.castingArray,selectedHandIndex:this.selectedHandIndex,getPrayerCost:this.getPrayerCost};this.renderer.render(t)}getPrayerCost=()=>{const t=[1,3,5,8,13,21,34];let e=0;for(let a=0;a<this.selectedPrayerIndices.length;a++)e+=t[a]||0;return e};handleClicks(t){const e=t.target,a=e.dataset.action;if(this.gameState==="GOD_SELECTION"&&a==="select-god"){const n=e.dataset.name;this.chosenGod=I.find(s=>s.name===n)||null,this.chosenGod&&this.enterPrayerPhase()}else if(this.gameState==="PRAYER"&&a==="select-card"){const n=parseInt(e.dataset.index||"-1");this.selectedPrayerIndices.includes(n)?this.selectedPrayerIndices=this.selectedPrayerIndices.filter(s=>s!==n):this.selectedPrayerIndices.push(n)}else if(this.gameState==="PRAYER"&&a==="confirm-prayer")this.confirmPrayerSelection();else if(this.gameState==="CASTING")if(a==="select-hand-card")this.selectedHandIndex=this.selectedHandIndex===parseInt(e.dataset.index||"0")?null:parseInt(e.dataset.index||"0");else if(a==="select-board-slot"){if(this.selectedHandIndex!==null&&this.playerHand[this.selectedHandIndex]){const n=parseInt(e.dataset.index||"0");if(this.castingArray[n]===null){const s=this.playerHand.splice(this.selectedHandIndex,1)[0];this.castingArray[n]=s,this.selectedHandIndex=null}}}else a==="sacrifice-card"?this.sacrificeSelectedCard():a==="start-trial"&&this.startNewTrial();else this.gameState==="JUDGEMENT"&&a==="continue"&&this.enterPrayerPhase();this.render()}sacrificeSelectedCard(){this.selectedHandIndex!==null&&this.playerHand[this.selectedHandIndex]&&(this.playerHand.splice(this.selectedHandIndex,1),this.playerAether+=1,this.selectedHandIndex=null)}enterPrayerPhase(){this.gameState="PRAYER",this.selectedPrayerIndices=[],this.cardsInPrayer=[];for(let t=0;t<7;t++)this.cardsInPrayer.push(x[Math.floor(Math.random()*x.length)])}confirmPrayerSelection(){const t=this.getPrayerCost();if(this.playerAether<t)return;this.playerAether-=t;const e=this.selectedPrayerIndices.sort((a,n)=>a-n).map(a=>this.cardsInPrayer[a]);this.playerHand.push(...e),this.gameState="CASTING"}startNewTrial(){this.units=[];const t=[];if(this.chosenGod){const e=this.chosenGod.avatar;t.push(new m(18,18,e.char,e.hp,"player",e.rangedStrength,e.rangedSpeed,e.godName))}if(this.castingArray.forEach((e,a)=>{if(e){const n=a%3*13+5,s=Math.floor(a/3)*5+15;t.push(new m(n,s,e.char,e.hp,"player",e.rangedStrength,e.rangedSpeed,e.godName))}}),t.push(new m(20,2,"W",5,"enemy",1,6,"Beroan")),this.chosenGod){const e=this.chosenGod.affinities;for(const a of t)a.team==="player"&&(a.godName===this.chosenGod.name&&(a.hp=Math.round(a.hp*1.5)),a.godName===e.positive&&(a.rangedStrength=Math.round(a.rangedStrength*1.5)),a.godName===e.negative&&(a.hp=Math.round(a.hp*.75)))}this.units=t,this.castingArray=Array(6).fill(null),this.playerHand=[],this.selectedHandIndex=null,this.gameState="TRIAL"}}const $=document.querySelector("#app"),H=new E($);H.start();
